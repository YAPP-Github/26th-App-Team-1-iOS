unlock_keychain(
  path: "~/Library/Keychains/login.keychain-db",
  password: ENV["KEYCHAIN_PASSWORD"]
)

default_platform(:ios)

platform :ios do
  WORKSPACE_NAME     = "Booket.xcworkspace"
  MAIN_APP_SCHEME    = "Booket"
  WORKSPACE_SCHEME   = "Booket-Workspace"

  DEV_TEAM_ID        = ENV["DEV_TEAM_ID"]
  DIST_TEAM_ID       = ENV["DIST_TEAM_ID"]
  DEV_IDENTITY       = ENV["DEV_CODE_SIGN_IDENTITY"]
  DIST_IDENTITY      = ENV["DIST_CODE_SIGN_IDENTITY"]

  BUNDLE_ID          = ENV["APP_IDENTIFIER"]
  APPLE_ID           = ENV["APPLE_ID"]

  MODULE_SCHEMES = %w[BKCore BKData BKDesign BKDomain BKNetwork BKPresentation BKStorage]
  TEST_SCHEMES   = MODULE_SCHEMES.map { |s| "#{s}Test" }

  desc "Generate Tuist project"
  lane :generate do
    UI.message("üèóÔ∏è Generating Tuist project...")
    sh("cd .. && tuist generate")
    UI.success("‚úÖ Tuist project generated!")

    UI.message("üìã Available schemes:")
    sh("xcodebuild -workspace ../#{WORKSPACE_NAME} -list")
  end

  desc "Build all modules (without main app)"
  lane :build_modules do
    generate
    UI.message("üî® Building all BK modules...")

    MODULE_SCHEMES.each do |scheme|
      UI.message("Building #{scheme}...")
      xcodebuild(
        workspace: WORKSPACE_NAME,
        scheme: scheme,
        configuration: "Debug",
        xcargs: [
          "CODE_SIGN_IDENTITY=''",
          "CODE_SIGNING_REQUIRED=NO"
        ].join(" ")
      )
    end

    UI.success("‚úÖ All modules built successfully!")
  end

  desc "Simple build with manual signing (testing)"
  lane :build_manual do
    generate

    UI.message("üî® Manual signing build test...")
    xcodebuild(
      workspace: WORKSPACE_NAME,
      scheme: MAIN_APP_SCHEME,
      configuration: "Debug",
      xcargs: [
        "CODE_SIGN_STYLE=Manual",
        "CODE_SIGN_IDENTITY='#{DEV_IDENTITY}'",
        "DEVELOPMENT_TEAM=#{DEV_TEAM_ID}",
        "PROVISIONING_PROFILE_SPECIFIER='match Development #{BUNDLE_ID}'",
        "OTHER_CODE_SIGN_FLAGS=--keychain #{ENV["MATCH_KEYCHAIN_NAME"]}"
      ].join(" ")
    )

    UI.success("‚úÖ Manual build completed!")
  end

  desc "Build main app for development"
  lane :build_dev do
    generate

    UI.message("üî® Building Booket app for development...")
    build_app(
      workspace: WORKSPACE_NAME,
      scheme: MAIN_APP_SCHEME,
      configuration: "Debug",
      export_method: "development",
      output_directory: "./builds/",
      export_options: {
        method: "development",
        signingStyle: "manual",
        teamID: DEV_TEAM_ID,
        provisioningProfiles: {
          BUNDLE_ID => "match Development #{BUNDLE_ID}"
        },
        compileBitcode: false
      },
      xcargs: [
        "CODE_SIGN_STYLE=Manual",
        "CODE_SIGN_IDENTITY='#{DEV_IDENTITY}'",
        "DEVELOPMENT_TEAM=#{DEV_TEAM_ID}",
        "PROVISIONING_PROFILE_SPECIFIER='match Development #{BUNDLE_ID}'",
        "OTHER_CODE_SIGN_FLAGS='--keychain #{ENV["MATCH_KEYCHAIN_NAME"]}'"
      ].join(" ")
    )

    UI.success("‚úÖ Development build completed! Check ./builds/ folder")
  end

  desc "Build main app for App Store"
  lane :build_release do
    generate

    UI.message("üì¶ Building Booket app for release...")
    build_app(
      workspace: WORKSPACE_NAME,
      scheme: MAIN_APP_SCHEME,
      configuration: "Release",
      export_method: "app-store",
      output_directory: "./builds/release",
      export_options: {
        method: "app-store",
        signingStyle: "manual",
        teamID: DIST_TEAM_ID,
        provisioningProfiles: {
          BUNDLE_ID => "match AppStore #{BUNDLE_ID}"
        },
        compileBitcode: true
      },
      xcargs: [
        "CODE_SIGN_STYLE=Manual",
        "CODE_SIGN_IDENTITY='#{DIST_IDENTITY}'",
        "DEVELOPMENT_TEAM=#{DIST_TEAM_ID}",
        "PROVISIONING_PROFILE_SPECIFIER='match AppStore #{BUNDLE_ID}'",
        "OTHER_CODE_SIGN_FLAGS='--keychain #{ENV["MATCH_KEYCHAIN_NAME"]}'"
      ].join(" ")
    )

    UI.success("‚úÖ Release build completed!")
  end

  desc "Simple build without archive (for testing)"
  lane :build_simple do
    generate

    UI.message("üî® Simple build test (manual signing)...")
    xcodebuild(
      workspace: WORKSPACE_NAME,
      scheme: MAIN_APP_SCHEME,
      configuration: "Debug",
      xcargs: [
        "CODE_SIGN_STYLE=Manual",
        "CODE_SIGN_IDENTITY='#{DEV_IDENTITY}'",
        "DEVELOPMENT_TEAM=#{DEV_TEAM_ID}",
        "ONLY_ACTIVE_ARCH=YES"
      ].join(" ")
    )

    UI.success("‚úÖ Simple build completed!")
  end

  desc "Run tests for all modules"
  lane :test_modules do
    generate
    UI.message("üß™ Running tests for all modules...")

    TEST_SCHEMES.each do |test_scheme|
      UI.message("Testing #{test_scheme}...")
      run_tests(
        workspace: WORKSPACE_NAME,
        scheme: test_scheme,
        devices: ["iPhone 15"],
        code_coverage: true,
        xcargs: "ONLY_ACTIVE_ARCH=YES"
      )
    end

    UI.success("‚úÖ All module tests passed!")
  end

  desc "Run tests for main app (if exists)"
  lane :test_app do
    generate

    UI.message("üß™ Testing main Booket app...")
    run_tests(
      workspace: WORKSPACE_NAME,
      scheme: MAIN_APP_SCHEME,
      devices: ["iPhone 15"],
      code_coverage: true,
      clean: true
    )

    UI.success("‚úÖ Main app tests passed!")
  end

  desc "Build workspace (all targets)"
  lane :build_workspace do
    generate

    UI.message("üî® Building entire workspace...")
    xcodebuild(
      workspace: WORKSPACE_NAME,
      scheme: WORKSPACE_SCHEME,
      configuration: "Debug",
      xcargs: [
        "CODE_SIGN_IDENTITY=''",
        "CODE_SIGNING_REQUIRED=NO"
      ].join(" ")
    )

    UI.success("‚úÖ Workspace build completed!")
  end

  desc "Quick validation - build modules and test"
  lane :validate do
    UI.message("üîç Running full validation...")

    build_modules
    test_modules
    build_dev

    UI.success("‚úÖ Full validation completed!")
  end

  desc "Build and upload to TestFlight"
  lane :beta do
    build_release
    # pilot(upload: true) Ï∂îÍ∞Ä Í∞ÄÎä•
    UI.success("üöÄ Uploaded to TestFlight (stub)")
  end

  desc "Clean everything"
  lane :clean do
    UI.message("üßπ Cleaning...")

    sh("cd .. && tuist clean")
    sh("rm -rf ./builds/")
    sh("rm -rf ./test_output/")

    UI.success("‚úÖ Clean completed!")
  end

  desc "Show project info"
  lane :info do
    generate

    UI.header("üì± Booket Project Information")
    UI.message("Workspace: #{WORKSPACE_NAME}")
    UI.message("Main App Scheme: #{MAIN_APP_SCHEME}")
    UI.message("Bundle ID: #{BUNDLE_ID}")
    UI.message("Apple ID: #{APPLE_ID || 'Not set'}")

    UI.message("\nüîß Environment Variables:")
    UI.message("  - DEV_TEAM_ID: #{ENV['DEV_TEAM_ID']}")
    UI.message("  - DIST_TEAM_ID: #{ENV['DIST_TEAM_ID']}")
    UI.message("  - APP_IDENTIFIER: #{BUNDLE_ID}")
    UI.message("  - APPLE_ID: #{APPLE_ID}")

    UI.message("\nüì¶ Module Schemes:")
    MODULE_SCHEMES.each { |scheme| UI.message("  - #{scheme}") }

    UI.message("\nüß™ Test Schemes:")
    TEST_SCHEMES.each { |scheme| UI.message("  - #{scheme}") }

    UI.message("\nüìã All Available Schemes:")
    sh("xcodebuild -workspace ../#{WORKSPACE_NAME} -list")
  end

  error do |lane, exception|
    UI.error("‚ùå Lane '#{lane}' failed: #{exception.message}")
  end
end
